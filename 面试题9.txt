
nginx如何优化
性能优化配置
	worker_processes number    | auto;      、
		设定work进程数量,通常应该为当前主机的cpu的物理核心数；
	worker_cpu_affinity number |auto ;      		
		工作进程绑定到cpu的设置,每个CPU设置是由一位掩码允许CPU,可以使用进程更加有序,避免进程资源抢夺
	worker_priority number;
		指定worker进程的nice值,设定worker进程优先级；[-20,20]
		默认优先级是0,可以适当调整优先级，可以先响应web数据接口
	worker_rlimit_nofile number;
		修改工作进程打开文件的最大数量限制。无需重启主进程，即可提高限制数。
		理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除,但是nginx分配请求并不是那么均匀，所以最好与ulimit -n的值保持一致
事件驱动配置优化:
	worker_connections number;  
		每个worker进程所能够打开的最大并发连接数数量；
		最大连接数=work_process * work_connections
	use method;
		默认是epoll;一般不需要更改
		Nginx使用了最新的epoll（Linux 2.6内核）和kqueue（freebsd）网络I/O模型，而Apache则使用的是传统的select模型。
	accept_mutex on | off;
		处理新的连接请求的方法；默认关闭
		on意味着由各worker轮流处理新请求
		Off意味着每个新请求的到达都会通知所有的worker进程,worker进程抢着接收,浪费效率；
		建议启用时表示用于让多个work轮流地序列化地响应请求
网络优化配置:
	tcp_nodelay on | off;
		在keepalived模式下的连接是否启用TCP_NODELAY选项；
		tcp协议为了节省带宽，通常在对于一些小报文不是直接发送，而是通过将诸多的小报文汇聚成一个大报文，然后打包发送。
		但是这样往往会增加延迟时间，这个选项我们一般是关闭的,但是如果和长连接一起使用的时候，建议打开此选项
	tcp_nopush on | off;
		nginx在一个数据包里发送所有头文件，而不一个接一个的发送,默认是关闭的,只有在sendfile启用时候才会启用
	sendfile on | off;
		是否启用sendfile功能；
		sendfile 配置可以提高 Nginx 静态资源托管效率。sendfile 是一个系统调用，直接在内核空间完成文件发送，不需要先 read 再 write,没有上下文切换开销。
连接优化:
	keepalive_timeout timeout [header_timeout];  
		设定保持连接的超时时长,0表示禁止长连接；默认为75s；
	keepalive_requests number;
		在一次长连接上所允许请求的资源的最大数量,默认为100; 
	keepalive_disable none | browser ...;
		对哪种浏览器禁用长连接；
		none 浏览器都不禁止长连接
	send_timeout time;
		向客户端发送响应报文的超时时长，此处，是指两次写操作之间的间隔时长；默认是60s
		这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接
缓冲区配置优化:
	client_body_buffer_size size;
		用于接收客户端请求报文的body部分的缓冲区大小；默认为16k；
		超出此大小时，其将被暂存到磁盘上的由client_body_temp_path指令所定义的位置；
	client_body_temp_path path [level1 [level2 [level3]]]
		设定用于存储客户端请求报文的body部分的临时存储路径及子目录结构和数量；
文件操作优化:
	aio on | off | threads[=pool];
		首先aio和sendfile是互相排斥的。启用aio，必须也启用directio，不然的话read()将成为阻塞。
		sendfile适合小文件,占用的是系统缓存。当传输大文件时，而且系统内存不够大的情况，使用sendfile()将较不适宜。此时应使用aio机制。
	open_file_cache off;
		nginx可以缓存以下三种信息：
			(1) 文件的描述符、文件大小和最近一次的修改时间；
			(2) 打开的目录结构；
			(3) 没有找到的或者没有权限访问的文件的相关信息；
	open_file_cache_valid time;
		缓存项有效性的检查频率；默认为60s; 
	open_file_cache_min_uses number;
		在open_file_cache指令的inactive参数指定的时长内，至少应该被命中多少次方可被归类为活动项；					
	open_file_cache_errors on | off;
		是否缓存查找时发生错误的文件一类的信息；
静态文件压缩:
	gzip on | off;
		启用或禁用gzip的压缩应答.
	gzip_comp_level level; 
		设定gzip压缩的响应,可接受的值的范围从1到9。
	gzip_disable regex ...;
		以“用户代理”禁用gzip的响应请求头字段匹配任何指定的正则表达式，只要符合就禁用压缩
	gzip_min_length length;
		设置最小长度将gzip的响应。页面字节数从header头中的Content-Length中进行获取。
		默认值是20,大于20字节才会压缩
	gzip_proxied off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ...;
		nginx作为代理服务器接收到从被代理服务器发送的响应报文后，在何种条件下启用压缩功能的；
			off:对代理的请求不启用
			any:压缩所有代理请求
			no-cache, no-store,private：表示从被代理服务器收到的响应报文首部的Cache-Control的值为此三者中任何一个，则启用压缩功能；
	gzip_types mime-type ...;
		压缩过滤器,仅对此处设定的MIME类型的内容启用压缩功能；


.....

MySQL如何优化
		连接请求处理方式：
			传统线程调度方式：
				方式一:
					one-thread-per-connection,每连接一个线程,退出后,连接线程被放入thread_cache或被销毁；
					在有着大量短连接或高并发场景中,线程的创建和销毁任务量急剧增加,开销较大,性能下降；
				方式二:
					thread pool机制：worker线程,处理单位为一个STATEMENT; worker处理完第一个连接的SQL之后,可转为处理其它连接的SQL请求,为了减少竞争产生，thread pool可被划分为多个组（每个CPU核心对应于一个组）,可根据连接线程的id将请求固定分配到指定组；
				方式三:
					No-Threads表示处理连接使用主线程处理,不额外创建线程，这种方式主要用于调试；
				设定:
					thread_handling =pool-of-threads

				查看:
					show variables like 'thread%'

			

				只读变量，仅支持配置文件修改； 
					thread-pool-size：
						thread pool中的group的数量,默认为CPU核心的个数,此时,不建议显式修改；

					thread-pool-max-threads：
						tread pool中的最大线程数量,所有group中的worker总数不能超出此限；
						默认为100000,可根据实际需要修改低于此数量的值；

					thread-pool-oversubscribe：
						一个thread pool group可过载的请求数,建议设定为3-20之间的值； 
						该参数用于控制CPU核心上“超频”的线程数,这个参数设置值不含listen线程计数。
					
					max_connections:
						最大并发连接数；
						MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下,可以过'conn%'通配符查看当前状态的连接数量，以定夺该值的大小

					back_log:
						等待连接的队列长度；
						MySQL等待连接的队列长度；默认应该是80/50,建议修改为500（每个连接256kb, 占用:125M）
						back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。
						也就是说,如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中,back_log值不能超过TCP/IP连接的侦听队列的大小(/proc/sys/net/ipv4/tcp_max_syn_backlog)

					interactive_timeout：默认8小时
						服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。
						在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，可以进行适当的调整小些。

					wait_timeout: 默认8小时
						服务器关闭非交互连接之前等待活动的秒数。
						在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，可以进行适当的调整小些。


		缓冲区变量：
			key_buffer_size:
				指定索引缓冲区大小,仅针对MyISAM表；
				建议key_buffer设置为物理内存的1/4,甚至是物理内存的30%~40%,如果key_buffer_size设置太大,系统就会频繁的换页,降低系统性能。
			
			临时表相关：
				max_heap_table_size:
					用户可以创建的内存表的最大值； 
					这个变量支持动态改变,即set @max_heap_table_size=#

				max_tmp_tables：
					客户端可以同时打开的临时表的最大数。

				tmp_table_size：
					临时表大小；
				
				查看其使用结果：
					SHOW GLOBAL STATUS LIKE 'created%';
					Created_tmp_tables表示创建的临时表总数,超出tmp_table_size定义的大小的临时表,将增大 Created_tmp_disk_tables；
					 
			InnoDB存储引擎相关：
				innodb_buffer_pool_size：
					为innodb表缓冲索引和数据；官方建议的最大值是RAM的70-80%；

				innodb_log_buffer_size:
					innodb事务日志的缓冲池大小；
					 磁盘速度是很慢的,直接将log写道磁盘会影响InnoDB的性能,该参数设定了log buffer的大小，一般4M。如果有大的blob操作，可以适当增大。

				innodb_flush_log_at_trx_commit：此处推荐参数2
					事务提交时,是否将事务日志同步至磁盘上的文件中；
					0：仅每秒钟自动同步一次；
					1：每秒钟或事务提交时同步；
					2：仅事务提交时同步；

				innodb_additional_mem_pool_size:
					用于指定Innodb存储数据字典以及其它内部数据结构的内存池大小；16M足够

				innodb_thread_concurrency:
					innodb的后台并发线程数，最大推荐为2*(CPU+DISK)

		其他优化选项:
			skip_name_resolve  = ON
				# 禁止MySQL对外部连接进行DNS解析,使用这一选项可以消除MySQL进行DNS解析的时间。
				# 但需要注意，如果开启该选项，
				# 则所有远程主机连接授权都要使用IP地址方式,否则MySQL将无法正常处理连接请求
			innodb_file_per_table=ON
				#InnoDB 默认会将所有的数据库InnoDB引擎的表数据存储在一个共享空间中：ibdata1,
				增删数据库的时候，ibdata1文件不会自动收缩,单个数据库的备份也将成为问题。
				通常只能将数据使用mysqldump导出,增加innodb_file_per_table参数。可以修改InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间(.ibd文件)。

			max_connections 用来设置最大连接 ( 用户 ) 数,每个连接MySQL的用户均算作一个连接
				默认为100个,max_connections 最大为16384 。
				该参数设置过小的话，会出现”Too many connections”错误。
				查看:show variables like "max_connections"; 
				修改方法:
					1.set global max_connections = 200
					2.修改my.cnf,max_connections=200

			max_connect_errors  是一个MySQL中与安全有关的计数器值,默认值为100个
				它负责阻止过多尝试失败的客户端以防止暴力破解密码的情况,maxconnecterrors的值与性能并无太大关系
				由于出现某台host连接错误次数等于maxconnecterrors ,日志中会出现类似blocked because of many connection errors 的信息,
				解决方法如下：
					1.执行mysqladmin flush-hosts或者重启 MySQL服务，将错误计数器清零
					2.my.cnf修改max_connect_errors的值，可以适当大些

			thread_concurrency       是在特定场合下才能使用的，这个变量是针对Solaris系统的。
				如果设置这个变量的话,mysqld就会调用thr_setconcurrency(),这个函数使应用程序给同一时间运行的线程系统提供期望的线程数目。CPU核数的2倍,比如有一个双核的CPU，那么thread_concurrency的应该为4；2个双核的cpu， thread_concurrency的值应为8。

			max_allowed_packet    这个参数是限制server允许通信的最大数据包大小。
				有时候可能因为这个参数设置过小，比较大的insert或者update操作会失败，所以参数应该设置大一些


			thread_cache_size 此参数用来缓存空闲的线程，以至不被销毁。
				如果线程缓存中有空闲线程，这时候如果建立新连接，MYSQL就会很快的响应连接请求

			sort_buffer_size  每个连接需要使用 buffer 时分配的内存大小，不是越大越好。
			例 : 1000个连接 , 一个1MB，会占用1GB内存，200WX1MB=20GB

			join_buffer_size  为了减少参与 join 的 ” 被驱动表 “的读取次数以提高性能.
			需要使用到join buffer来协助完成 join 操作当 join buffer 太小,MySQL 不会将该buffer存入磁盘文件而是先将join buffer中的结果与需求join的表进行操作,然后清空 join buffer 中的数据。
			继续将剩余的结果集写入次buffer中，如此往复，这势必会造成被驱动表需要被多次读取，成倍增加IO访问，降低效率 

			read_buffer_size  这个参数是MySQL读入缓冲区的大小,将对表进行顺序扫描的请求将分配一个读入缓冲区，mysql会为它分配一段内存缓冲区，readbuffersize变量控制这一缓冲区的大小,如果对表的顺序扫描非常频繁，并你认为频繁扫描进行的太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能，read_buffer_size变量控制这一提高表的顺序扫描的效率 数据文件顺序

			myisam_sort_buffer_size  MyISAM表发生变化时，重新排序所需的缓存。


		查看连接数命令:
			使用 show status查看当前mysql连接情况 :
				mysql>SHOW STATUS WHERE Variable_name LIKE '%Thread%';
					Threads_cached:代表当前此时此刻线程缓存中有多少空闲线程。
					Threads_connected:代表当前已建立连接的数量，因为一个连接就需要一个线程，所以也可以看成当前被使用的线程数。
					Threads_created:代表从最近一次服务启动，已创建线程的数量。
					Threads_running:代表当前激活的（非睡眠状态）线程数。并不是代表正在使用的线程数，有时候连接已建立，但是连接处于sleeep状态

PHP如何优化
php.ini优化配置
	上传修改配置:
		file_uploads = On  			是否支持通过HTTP POST方式上传文件
		upload_tmp_dir =    		临时文件保存的目录
		upload_max_filesize = 2M    允许上传文件的最大值
		post_max_size = 8M			表单发送数据的最大值
		max_file_uploads = 20       一次允许上传文件的最大数

	是否禁用可执行外部命令函数:
		disable_functions = phpinfo,passthru,exec,system,popen,chroot,escapeshellcmd,escapeshellarg,shell_exec,proc_open,proc_get_status
		 		该选项可以设置哪些PHP函数是禁止使用的，PHP中有一些函数的风险性还是相当大的，可以直接执行一些系统级脚本命令，如果允许这些函数执行，当PHP程序出现漏洞时，损失是非常严重的！

	　　open_basedir = D:/usr/www     控制php脚本能访问的目录
			使用open_basedir选项能够控制PHP脚本只能访问指定的目录，这样能够避免PHP脚本访问
　　        不应该访问的文件,一定程度上限制了phpshell的危害，我们一般可以设置为只能访问网站目录

	脚本执行时间:
		max_execution_time = 30  
		该选项设定PHP程序的最大执行时间，如果一个PHP脚本被请求，且该PHP脚本在max_execution_time时间内没能执行完毕，则PHP不再继续执行，直接给客户端返回超时错误(504)。

	PHP脚本处理内存占用找到：
		memory_limit = 8M
		该选项指定PHP脚本处理所能占用的最大内存，默认为8MB，如果您的服务器内存为1GB以上，则该选项可以设置为256MB以获得更快的PHP脚本处理效率。 

	PHP全局函数声明:
		register_globals = Off
		网络上很多关于PHP设置的文章都推荐将该选项设置为On，其实这是一种及其危险的设置方法，很可能引起严重的安全性问题。如果没有特
		殊的需要，强烈推荐保留默认设置！ 

	Session存储位置:
		session.save_path=
		如果你的PHP程序使用Session对话，则可以将Session存储位置设置为/dev/shm，/dev/shm是Linux系统独有的TMPFS文件系统，是以内存为主要存储方式的文件系统，比RAMDISK更优秀，因为可以使用DISKSWAP作为补充，而且是系统自带的功能模块，不需要另行配置。

	安全模式:
		safe_mode = on
		php安全模式是个非常重要的php内嵌的安全机制，能够控制一些php的函数执行，比如system()调用系统命令函数

	关闭PHP版本信息在http头中的泄漏
		expose_php = off

	打开magic_quotes_gpc来防止SQL注入
		magic_quotes_gpc = off

	错误信息控制
		display_errors = off #正式环境不要给用户报错
			一般php在没有连接到数据库或者其他情况下会提示错误，一般信息都会包含php脚本当前的路径信息或者查询的SQL语句信息，这类信息提供给黑客后市不安全的，建议关闭错误提示
		error_reporting = E_WARNING & E_ERROR
			如果你却是是要显示错误信息，一定要设置显示错误的级别，比如只显示警告以上的信息：

　　error_reporting = E_WARNING & E_ERROR

	每个脚本等待输入数据最长时间
		max_input_time = 60;   #(-1表示不限制)

	时间配置:
		date.time_zone=PRC   #设定php运行为上海时区时间

	部分安全参数优化
		禁止打开远程地址
			allow_url_fopen = off
		设定防止Nginx文件解析错误漏洞
			cgi.fix_path = 0
		调整php sesson会话共享信息存放位置
			session.save_handler = memcache
			session.save_path = "tcp://10.0.0.8:1211"

	设定session和cookie的保存周期:
		session.gc_maxlifetime = 1440
			PHP中的session有效期默认是1440秒（24分钟）
			客户端超过24分钟没有刷新，当前session就会失效。很明显，这是不能满足需要的
		session.cookie_lifetime= 0
			该设置可以指定cookie默认生命周期，默认是0,表示当关闭浏览器后，该cookies失效，你可以这样

	错误日志:
		log_errors = On
	　　同时也要设置错误日志存放的目录，建议根apache的日志存在一起：

	GET/POST/COOKIE 输入的变量被接受的个数
		max_input_vars  
		正常情况下够用，但当提交表单数超过1000个则要将 php.ini 的 max_input_vars 值调大，否则表单数据就提交不上去。

	字符集配置:
		default_charset = "utf-8"

php-fpm配置优化:
	参考官方配置文档:http://php.net/manual/zh/install.fpm.configuration.php

	pid = /usr/local/var/run/php-fpm.pid
		默认在php安装目录中的var/run/php-fpm.pid,用于表示服务是否启动

	error_log  = /usr/local/var/log/php-fpm.log
		默认在php安装目录中的var/log/php-fpm.log,便于调试问题

	log_level = notice
		#错误级别,上面的php-fpm.log纪录的登记。
		可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.

	emergency_restart_threshold = 60
	emergency_restart_interval = 60s
		表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。
		这两个选项一般保持默认值。0 表示 '关闭该功能'. 默认值: 0 (关闭).

	process_control_timeout = 0  建议设置成10s
		#设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.

	daemonize = yes
		#后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置

	listen = 127.0.0.1:9000
		#fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: 'ip:port', 'port', '/path/to/unix/socket'. 每个进程池都需要设置。如果nginx和php在不同的机器上，分布式处理，就设置ip这里就可以了。

	listen.backlog = -1
		#backlog数,设置 listen 的半连接队列长度，-1表示无限制，由操作系统决定，此行注释掉就行

	listen.allowed_clients = 127.0.0.1
		#允许访问FastCGI进程的IP白名单,设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接。

	listen.owner = www
	listen.group = www
	listen.mode = 0666
		#unix socket设置选项，如果使用tcp方式访问，这里注释即可。

	user = www
	group = www
		#启动进程的用户和用户组，FPM 进程运行的Unix用户, 必须要设置。用户组，如果没有设置，则默认用户的组被使用。


	pm = dynamic 	
		#php-fpm进程启动模式，pm可以设置为static和dynamic和ondemand
		#如果选择static，则进程数就数固定的，由pm.max_children指定固定的子进程数。
		#如果选择dynamic，则进程数是动态变化的,由以下参数决定：
	pm.max_children = 50 
		#子进程最大数
	pm.start_servers = 2 
		#启动时的进程数，默认值为: min_spare_servers + (max_spare_servers - min_spare_servers) / 2
	pm.min_spare_servers = 1 
		#保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程
	pm.max_spare_servers = 3 
		#保证空闲进程数最大值，如果空闲进程大于此值，此进行清理

	pm.max_requests = 500
		#设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 '0' 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.

	pm.status_path = /status
		#FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到

	ping.path = /ping
		#FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。

	ping.response = pong
		#用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.

	access.log = log/$pool.access.log
		#每一个请求的访问日志，默认是关闭的。

	access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"
		#设定访问日志的格式。

	slowlog = log/$pool.log.slow
		#慢请求的记录日志,配合request_slowlog_timeout使用，默认关闭

	request_slowlog_timeout = 10s
		#当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 '0' 表示 'Off'

	request_terminate_timeout = 0
		#设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的'max_execution_time'因为某些特殊原因没有中止运行的脚本有用. 设置为 '0' 表示 'Off'.当经常出现502错误时可以尝试更改此选项。

	rlimit_files = 1024
		#设置文件打开描述符的rlimit限制. 
		默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。

	rlimit_core = 0
		#设置核心rlimit最大限制值. 
		可用值: 'unlimited' 、0或者正整数. 默认值: 系统定义值.

	chroot =
		#启动时的Chroot目录. 
		所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.

	chdir =
		#设置启动目录，启动时会自动Chdir到该目录.
		 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）

	catch_workers_output = yes
		#重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.

	slowlog = /usr/local/var/log/php-fpm.log.slow
	request_slowlog_timeout = 15s
		当一个请求该设置的超时时间15秒后，就会将对应的PHP调用堆栈信息完整写入到慢日志中。
		php-fpm慢日志会记录下进程号，脚本名称，具体哪个文件哪行代码的哪个函数执行时间过长：


######################################################################################################################
php-per修炼手册：https://www.kancloud.cn/digest/php-src/136250
php-fpm进程优化:
开启进程的三种模式:
	设置进程管理器如何管理子进程。可用值：static，ondemand，dynamic。必须设置。
		static 		子进程的数量是固定的（pm.max_children）。
		ondemand 	进程在有需求时才产生,这一种基本上废弃状态。
		dynamic 	子进程的数量在下面配置的基础上动态设置：

	模式影响配置:
		static     (pm.max_children)
		dynamic    (pm.max_children,pm.start_servers,pm.min_spare_servers,pm.max_spare_servers)
		ondemand   (pm.max_chileren,pm.proccess_idle_timeout)

	配置解释:
		pm string
			设置进程管理器如何管理子进程。
			可用值:static，ondemand，dynamic。必须设置。
			static - 子进程的数量是固定的（pm.max_children）。
			ondemand - 进程在有需求时才产生（当请求时，与 dynamic 相反，pm.start_servers 在服务启动时即启动。
			dynamic - 子进程的数量在下面配置的基础上动态设置：pm.max_children，pm.start_servers，pm.min_spare_servers，pm.max_spare_servers。

		pm.max_children int
			pm 设置为 static 时表示创建的子进程的数量，pm 设置为 dynamic 时表示最大可创建的子进程的数量。必须设置。
			该选项设置可以同时提供服务的请求数限制。
			类似 Apache 的 mpm_prefork 中 MaxClients 的设置和 普通PHP FastCGI中的 PHP_FCGI_CHILDREN 环境变量。

		pm.start_servers int
			设置启动时创建的子进程数目。
			仅在 pm 设置为 dynamic 时使用。默认值：min_spare_servers + (max_spare_servers - min_spare_servers) / 2。

		pm.min_spare_servers int
			设置空闲服务进程的最低数目。仅在 pm 设置为 dynamic 时使用。必须设置。

		pm.max_spare_servers int
			设置空闲服务进程的最大数目。仅在 pm 设置为 dynamic 时使用。必须设置。

		
到底选择static还数dynamic?
这个取决于两点:
	1.你的机器配置,可用内存是否充足
		一个php-fpm进程大约占用20M内存
	2.你的WEB并发情况,
		假如有1000个并发,你需要知道php-fpm是阻塞的单线程模型,
		当你的fpm并发过大的时候,而php-fpm的进程数量过少,则无法直接运行,因为在排队,会严重影响访问速度
		所以可以根据并发,适当调整fpm数量
		需要注意的一点是：
			1000个并发对于一个web来说,并不是都是使用fpm处理,如果是静态语言直接就经过nginx处理了,如果是动态语言php,才会使用php-fpm处理,而且php是页面级的,一次调用,一次释放,所谓的并发1000,在严格意义上,经过php-fpm处理的请求大概只有几百个。


一般原则是：
	动态适合小内存机器,灵活分配进程,省内存。
	静态适用于大内存机器,动态创建回收进程对服务器资源也是一种消耗。

如果你的内存很大,有8-20G,按照一个php-fpm进程20M算，100个就2G内存了,那就可以开启static模式。
如果你的内存很小,比如才256M，那就要小心设置了，因为你的机器里面的其他的进程也算需要占用内存的，所以设置成dynamic是最好的，
比如：pm.max_chindren = 8, 占用内存160M左右，而且可以随时变化，对于一半访问量的网站足够了。
#############################################################################################################################





		













